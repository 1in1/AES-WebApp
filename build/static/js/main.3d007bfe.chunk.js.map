{"version":3,"sources":["About.js","Box.js","HoverBox.js","First.js","Inverse.js","EditBox.js","Utility.js","Affine.js","SubBytes.js","ShiftRows.js","MixColumns.js","AddRoundKey.js","App.js","serviceWorker.js","index.js"],"names":["AboutPage","props","className","href","Square","value","toString","Box","data","map","n","i","key","HoverBox","useState","isShown","setIsShown","class","onMouseEnter","onMouseLeave","under","over","FirstPage","Latex","tex","displayMode","input","id","inverseTable","InverseWidget","val","setVal","for","type","text","onChange","event","target","valid","parseInt","placeholder","default","style","width","EditBox","values","initial","editHandler","m","a","util","toBinArray","b","out","toInt","arr","reverse","reduce","acc","curr","xorVec","andVec","addVec","fn","cols","ATDraw","require","partial","output","join","ATWidget","subs","SubBytesPage","editOpen","setEditOpen","setInput","Inverse","onClick","inByte","v","init_data","ShiftRowsPage","Array","length","j","getOutput","getF8MultTable","irredCoeffs","transpose","poly","slice","unshift","pop","k","index","table","texString","times","MultTableDraw","MultTableWidget","MixColumnsPage","rpoly","transp","s","multTables","hasOwnProperty","d","column","l","AddRoundKeyPage","editInputOpen","setEditInputOpen","editKeyOpen","setEditKeyOpen","roundKey","setRoundKey","App","document","title","KatexCssInclude","createElement","rel","head","appendChild","test_data","page","setPage","pageObjects","About","SubBytes","ShiftRows","MixColumns","AddRoundKey","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3d007bfe.chunk.js","sourcesContent":["import React from 'react'\n\nfunction AboutPage(props) {\n    return (\n        <div className='page'>\n            <h1>AES Web App thing</h1>\n            <p>This is a very small web app written to give me a bit of experience with React more than anything else. It gives an explanation of the AES algorithm that should be more than enough to allow someone with a basic understanding of fields to implement the algorithm themselves (minus key expansion - probably coming soon). I'm planning to have more detailed explanations appear when the reader hovers over sections of interest. I'd only written my first line with React two days before starting this, so there could well be things that break! Let me know if this happens :) The source is available on my GitHub <a href='https://github.com/1in1/AES-WebApp'>here</a>.</p>\n        </div>\n    );\n}\n\nexport default AboutPage;","import React from 'react'\nimport './Box.css'\n\n\n\nconst Square = (props) => (\n    <div className='cell'>{props.value.toString(16)}</div>\n);\n\nfunction Box (props) {\n    return (\n    <div className='box'>\n        {props.data.map((n, i) => \n            <Square key={i} value={n} />\n        )}\n    </div>\n    );\n}\n\nexport default Box;","import React, { useState } from 'react'\n\nfunction HoverBox(props) {\n    const [isShown, setIsShown] = useState(false);\n    return (\n      <div class='hoverable' onMouseEnter={() => setIsShown(true)} onMouseLeave={() => setIsShown(false)}>\n        {props.under}\n        {isShown && <div class='reveal'>{props.over}</div>}\n      </div>\n    );\n}\n\nexport default HoverBox;","import React from 'react'\nimport Box from './Box.js'\nimport './First.css'\nimport HoverBox from './HoverBox.js'\n\nfunction FirstPage(props) {\n  const Latex = props.tex;\n\n  return (\n    <div className='page'>\n      <h2>Prerequisites</h2>\n      <p>For Rijndael, we work in the finite field of order <Latex>$ 2^8 = 256$</Latex>, which we denote <Latex>{'$\\\\mathbb{F}(2^8)$'}</Latex> throughout. This is a pretty large object to try and think about, so it will help us to instead consider an isomorphism to a slightly nicer object. The authors of Rijndael chose to use:</p>\n\n      <HoverBox under={\n      <Latex displayMode={true}>\n        {'$$\\\\mathbb{F}(2^8) \\\\cong \\\\frac{\\\\mathbb{F}(2)[x]}{(x^8 + x^4 + x^3 + x + 1)}$$'}\n      </Latex>\n      } over={<p>Why does this work? <Latex>{'$\\\\mathbb{F}(2)$'}</Latex> is a field by definition, so its polynomial ring is a Euclidian domain. If we can quotient by a polynomial of order 8, then all elements in the quotient have a unique non-zero representative of order strictly less than 8, so the quotient ring will be of the correct order. Since <Latex>$ x^8 + x^4 + x^3 + x + 1 $</Latex> is a prime element in this ring, this quotient is an integral domain. All finite integral domains are fields, and finite fields are unique up to isomorphism, and so this is the field we want.</p>} />\n\n      <p>It turns out this is a particularly nice object to study for a couple of reasons. Firstly, and most obviously, the width of a byte is 8, so the field has as many elements as there are possible bytes. Via the isomorphism above, we can represent each element as a polynomial of degree strictly less than 8, with coefficients in <Latex>{'$\\\\mathbb{F}(2)$'}</Latex>, which may be stored as a single byte. Here we will represent numbers in this field like this, with the bytes in green hexadecimal, e.g.</p>\n\n      <Latex displayMode={true}>{'$x^5 + x^3 + x^2 = {\\\\color{green}\\\\{1c\\\\}}$'}</Latex>\n\n      <p>We also note that each element is its own additive inverse; this is again immediately clear by thinking about the isomorphism.</p>\n\n      <p>Rijndael works on two-dimensional blocks, which each have four rows and a fixed number of columns. The typical number of columns is four, so we chunk our plaintext into blocks of 16 bytes, and encrypt each block individually. We call this array the <i>state</i> when describing the algorithm. The box below represents a state of the algorithm - you can edit these to see how the algorithm behaves on different data.</p>\n\n      <div className='boxContainerOuter'>\n        <div className='boxContainerInner'>State:\n          <Box data={props.input} />\n        </div>\n      </div>\n      \n      <p>As with all encryption schemes, we begin with two pieces of information: the <i>plaintext</i> and the <i>key</i>. The cipher consist of several rounds of the same four basic operations. To this end, we expand a given key into several, and one is used for each round - this is called <i>key expansion</i>, and produces a set of <i>round keys</i>. Each round consists of the steps: (we are just filling space here lol)\n      </p>\n      <div id='steps'>\n        <div className='step'>Substitute Bytes</div>\n        <div className='step'>Shift Rows</div>\n        <div className='step'>Mix Columns</div>\n        <div className='step'>Add Round Key</div>\n      </div>\n      The AES specification states we go in the order:\n      <div className='listContainer'><ul>\n        <li>Add Round Key</li>\n        <ul>\n          -Repeat-\n          <li>Sub Bytes</li>\n          <li>Shift Rows</li>\n          <li>Mix Colums</li>\n          <li>Add Round Key</li>\n          -9 times-\n        </ul>\n        <li>Sub Bytes</li>\n        <li>Shift Rows</li>\n        <li>Add Round Key</li>\n      </ul></div>\n      Note that we don't mix columns on the final go round; it adds no extra diffusion.\n    </div>\n  );\n}\n\nexport default FirstPage;","import React, { useState } from 'react'\n\nconst inverseTable = [0x00, 0x01, 0x8D, 0xF6, 0xCB, 0x52, 0x7B, 0xD1, 0xE8, 0x4F, 0x29, 0xC0, 0xB0, 0xE1, 0xE5, 0xC7, 0x74, 0xB4, 0xAA, 0x4B, 0x99, 0x2B, 0x60, 0x5F, 0x58, 0x3F, 0xFD, 0xCC, 0xFF, 0x40, 0xEE, 0xB2, 0x3A, 0x6E, 0x5A, 0xF1, 0x55, 0x4D, 0xA8, 0xC9, 0xC1, 0x0A, 0x98, 0x15, 0x30, 0x44, 0xA2, 0xC2, 0x2C, 0x45, 0x92, 0x6C, 0xF3, 0x39, 0x66, 0x42, 0xF2, 0x35, 0x20, 0x6F, 0x77, 0xBB, 0x59, 0x19, 0x1D, 0xFE, 0x37, 0x67, 0x2D, 0x31, 0xF5, 0x69, 0xA7, 0x64, 0xAB, 0x13, 0x54, 0x25, 0xE9, 0x09, 0xED, 0x5C, 0x05, 0xCA, 0x4C, 0x24, 0x87, 0xBF, 0x18, 0x3E, 0x22, 0xF0, 0x51, 0xEC, 0x61, 0x17, 0x16, 0x5E, 0xAF, 0xD3, 0x49, 0xA6, 0x36, 0x43, 0xF4, 0x47, 0x91, 0xDF, 0x33, 0x93, 0x21, 0x3B, 0x79, 0xB7, 0x97, 0x85, 0x10, 0xB5, 0xBA, 0x3C, 0xB6, 0x70, 0xD0, 0x06, 0xA1, 0xFA, 0x81, 0x82, 0x83, 0x7E, 0x7F, 0x80, 0x96, 0x73, 0xBE, 0x56, 0x9B, 0x9E, 0x95, 0xD9, 0xF7, 0x02, 0xB9, 0xA4, 0xDE, 0x6A, 0x32, 0x6D, 0xD8, 0x8A, 0x84, 0x72, 0x2A, 0x14, 0x9F, 0x88, 0xF9, 0xDC, 0x89, 0x9A, 0xFB, 0x7C, 0x2E, 0xC3, 0x8F, 0xB8, 0x65, 0x48, 0x26, 0xC8, 0x12, 0x4A, 0xCE, 0xE7, 0xD2, 0x62, 0x0C, 0xE0, 0x1F, 0xEF, 0x11, 0x75, 0x78, 0x71, 0xA5, 0x8E, 0x76, 0x3D, 0xBD, 0xBC, 0x86, 0x57, 0x0B, 0x28, 0x2F, 0xA3, 0xDA, 0xD4, 0xE4, 0x0F, 0xA9, 0x27, 0x53, 0x04, 0x1B, 0xFC, 0xAC, 0xE6, 0x7A, 0x07, 0xAE, 0x63, 0xC5, 0xDB, 0xE2, 0xEA, 0x94, 0x8B, 0xC4, 0xD5, 0x9D, 0xF8, 0x90, 0x6B, 0xB1, 0x0D, 0xD6, 0xEB, 0xC6, 0x0E, 0xCF, 0xAD, 0x08, 0x4E, 0xD7, 0xE3, 0x5D, 0x50, 0x1E, 0xB3, 0x5B, 0x23, 0x38, 0x34, 0x68, 0x46, 0x03, 0x8C, 0xDD, 0x9C, 0x7D, 0xA0, 0xCD, 0x1A, 0x41, 0x1C];\n\n\nfunction InverseWidget(props) {\n    const [val, setVal] = useState('00');\n    return (\n        <div class='inverse'>\n            <label for='inverseInput'>Try it - inverse of: </label>\n            <input \n                type='text' \n                value={val.text}\n                onChange={event => {\n                    if(event.target.value==='') {\n                        setVal({text: '', valid: false});\n                    } else {\n                        let i = parseInt(event.target.value, 16);\n                        if(i>=0 && i < 256){\n                            setVal({text: event.target.value, valid: true});\n                        }\n                    }\n                }}\n                placeholder={props.default}\n                id='inverseInput' \n                style={{width: 20}} />\n            <p>{val.valid && \n            inverseTable[parseInt(val.text, 16)].toString(16)}</p>\n        </div>\n    );\n}\n\nexport default InverseWidget;","import React from 'react'\n\nfunction EditBox(props) {\n    const values = props.initial.map(n => n.toString(16));\n    return (\n    <div className='editBox'>\n        {values.map((n, i) => \n            <div className='cell'>\n            <input type='text'\n            value={n}\n            onChange={event => {\n                if(event.target.value==='') {\n                    values[i]='00';\n                    props.editHandler(values.map(m => parseInt(m, 16)));\n                } else {\n                    let a = parseInt(event.target.value, 16);\n                    if(a >=0 && a < 256) {\n                        values[i]=event.target.value;\n                        props.editHandler(values.map(m => parseInt(m, 16)));\n                    }\n                }\n            }}\n            />\n            </div>\n        )}\n    </div>\n    );\n}\n\nexport default EditBox;","const util = {\n    toBinArray: (b) => {\n        let out = [];\n        for(let i=0; i<8; i++)\n            out[i] = (b>>i)&1;\n        return out;\n    },\n    toInt: (arr) => {\n        return arr.reverse().reduce((acc, curr) => 2*acc + curr);\n    },\n    xorVec: (a, b) => {\n        let out = [];\n        for(let i in a)\n            out[i] = a[i]^b[i];\n        return out;\n    },\n    andVec: (a, b) => {\n        let out = [];\n        for(let i in a)\n            out[i] = a[i]&b[i];\n        return out;\n    },\n    addVec: (a, b, fn) => {\n        let out = [];\n        for(let i in a)\n            out[i] = fn(a[i], b[i]);\n        return out;\n    },\n}\n\nexport default util;","import React, { useState } from 'react'\nimport util from './Utility.js'\n\nconst cols = [[1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1]];\n\n\nfunction ATDraw(props) {\n    const Latex = require('react-latex');\n    \n    const input = util.toBinArray(props.value);\n    let partial = [0,0,0,0,0,0,0,0];\n    for(let i in input) {\n        if(input[i]) {\n            partial = util.xorVec(partial, cols[i]);\n        }\n    }\n    const output = util.xorVec(partial, [1, 1, 0, 0, 0, 1, 1, 0]);\n    return (\n        <Latex>{`$$\n            \\\\begin{bmatrix} 1&0&0&0&1&1&1&1\\\\\\\\1&1&0&0&0&1&1&1\\\\\\\\1&1&1&0&0&0&1&1&\\\\\\\\1&1&1&1&0&0&0&1\\\\\\\\1&1&1&1&1&0&0&0\\\\\\\\0&1&1&1&1&1&0&0\\\\\\\\0&0&1&1&1&1&1&0\\\\\\\\0&0&0&1&1&1&1&1 \\\\end{bmatrix}\n            \\\\begin{bmatrix}`+ input.join('\\\\\\\\') + `\\\\end{bmatrix}\n            +\n            \\\\begin{bmatrix} 1\\\\\\\\1\\\\\\\\0\\\\\\\\0\\\\\\\\0\\\\\\\\1\\\\\\\\1\\\\\\\\0 \\\\end{bmatrix}\n            =\n            \\\\begin{bmatrix}` + partial.join('\\\\\\\\') + `\\\\end{bmatrix}\n            +\n            \\\\begin{bmatrix} 1\\\\\\\\1\\\\\\\\0\\\\\\\\0\\\\\\\\0\\\\\\\\1\\\\\\\\1\\\\\\\\0 \\\\end{bmatrix}\n            =\n            \\\\begin{bmatrix}` + output.join('\\\\\\\\') + `\\\\end{bmatrix}\n            = ` + util.toInt(output).toString(16) + `\n        $$`}</Latex>\n    );\n}\n\nfunction ATWidget(props) {\n    const [val, setVal] = useState('00');\n    return (\n        <div class='affine'>\n            <label for='affineInput'>Try it - transform of: </label>\n            <input \n                type='text' \n                value={val.text}\n                onChange={event => {\n                    if(event.target.value==='') {\n                        setVal({text: '', valid: false});\n                    } else {\n                        let i = parseInt(event.target.value, 16);\n                        if(i>=0 && i < 256){\n                            setVal({text: event.target.value, valid: true});\n                        }\n                    }\n                }}\n                placeholder={props.default}\n                id='affineInput' \n                style={{width: 20}} />\n            <p>{val.valid && \n            <ATDraw key={val.text} value={parseInt(val.text, 16)}/>}</p>\n        </div>\n    );\n}\n\nexport default ATWidget;","import React, { useState } from 'react'\nimport Box from './Box.js'\nimport InverseWidget from './Inverse.js'\nimport EditBox from './EditBox.js'\nimport ATWidget from './Affine.js';\n\n\nconst subs = [0x63 ,0x7c ,0x77 ,0x7b ,0xf2 ,0x6b ,0x6f ,0xc5 ,0x30 ,0x01 ,0x67 ,0x2b ,0xfe ,0xd7 ,0xab ,0x76 ,0xca ,0x82 ,0xc9 ,0x7d ,0xfa ,0x59 ,0x47 ,0xf0 ,0xad ,0xd4 ,0xa2 ,0xaf ,0x9c ,0xa4 ,0x72 ,0xc0 ,0xb7 ,0xfd ,0x93 ,0x26 ,0x36 ,0x3f ,0xf7 ,0xcc ,0x34 ,0xa5 ,0xe5 ,0xf1 ,0x71 ,0xd8 ,0x31 ,0x15 ,0x04 ,0xc7 ,0x23 ,0xc3 ,0x18 ,0x96 ,0x05 ,0x9a ,0x07 ,0x12 ,0x80 ,0xe2 ,0xeb ,0x27 ,0xb2 ,0x75 ,0x09 ,0x83 ,0x2c ,0x1a ,0x1b ,0x6e ,0x5a ,0xa0 ,0x52 ,0x3b ,0xd6 ,0xb3 ,0x29 ,0xe3 ,0x2f ,0x84 ,0x53 ,0xd1 ,0x00 ,0xed ,0x20 ,0xfc ,0xb1 ,0x5b ,0x6a ,0xcb ,0xbe ,0x39 ,0x4a ,0x4c ,0x58 ,0xcf ,0xd0 ,0xef ,0xaa ,0xfb ,0x43 ,0x4d ,0x33 ,0x85 ,0x45 ,0xf9 ,0x02 ,0x7f ,0x50 ,0x3c ,0x9f ,0xa8 ,0x51 ,0xa3 ,0x40 ,0x8f ,0x92 ,0x9d ,0x38 ,0xf5 ,0xbc ,0xb6 ,0xda ,0x21 ,0x10 ,0xff ,0xf3 ,0xd2 ,0xcd ,0x0c ,0x13 ,0xec ,0x5f ,0x97 ,0x44 ,0x17 ,0xc4 ,0xa7 ,0x7e ,0x3d ,0x64 ,0x5d ,0x19 ,0x73 ,0x60 ,0x81 ,0x4f ,0xdc ,0x22 ,0x2a ,0x90 ,0x88 ,0x46 ,0xee ,0xb8 ,0x14 ,0xde ,0x5e ,0x0b ,0xdb ,0xe0 ,0x32 ,0x3a ,0x0a ,0x49 ,0x06 ,0x24 ,0x5c ,0xc2 ,0xd3 ,0xac ,0x62 ,0x91 ,0x95 ,0xe4 ,0x79 ,0xe7 ,0xc8 ,0x37 ,0x6d ,0x8d ,0xd5 ,0x4e ,0xa9 ,0x6c ,0x56 ,0xf4 ,0xea ,0x65 ,0x7a ,0xae ,0x08 ,0xba ,0x78 ,0x25 ,0x2e ,0x1c ,0xa6 ,0xb4 ,0xc6 ,0xe8 ,0xdd ,0x74 ,0x1f ,0x4b ,0xbd ,0x8b ,0x8a ,0x70 ,0x3e ,0xb5 ,0x66 ,0x48 ,0x03 ,0xf6 ,0x0e ,0x61 ,0x35 ,0x57 ,0xb9 ,0x86 ,0xc1 ,0x1d ,0x9e ,0xe1 ,0xf8 ,0x98 ,0x11 ,0x69 ,0xd9 ,0x8e ,0x94 ,0x9b ,0x1e ,0x87 ,0xe9 ,0xce ,0x55 ,0x28 ,0xdf ,0x8c ,0xa1 ,0x89 ,0x0d ,0xbf ,0xe6 ,0x42 ,0x68 ,0x41 ,0x99 ,0x2d ,0x0f ,0xb0 ,0x54 ,0xbb ,0x16];\n\n\nfunction SubBytesPage(props) {\n    const [editOpen, setEditOpen] = useState(false);\n    const [input, setInput] = useState(props.input);\n    const Latex = props.tex;\n\n\n    return (\n        <div className='page'>\n            <h2>Substitute Bytes</h2>\n            <p>The first step in a round of Rijndael is to swap each byte with another. This is conceptually done in two operations. Let <Latex>{'$\\\\color{green}{\\\\{p\\\\}}$'}</Latex> be our input.</p>\n            <p>First, we substitute this with its multiplicative inverse in <Latex>{'$ \\\\mathbb{F}(2^8) $. Of course, $\\\\color{green}{\\\\{00\\\\}}$'}</Latex> has no such inverse, but we define this to be self-inverse to make everything work.</p>\n\n            <InverseWidget default={'00'} />\n\n            <p><Latex>{'Let $ {\\\\color{green}\\\\{p\\\\}^{-1}} = {\\\\color{green}\\\\{q\\\\}} $'}</Latex>. Then, we apply a specific affine transformation. This transformation is best understood as taking the sum of rotations of the byte representing the number, with a constant at the end. The matrix below shows the transformation with respect to the natural (when considered a vector space over <Latex>{'$\\\\mathbb{F}(2)$'}</Latex>) basis <Latex>{'$ \\\\{1, x, x^2, ..., x^7\\\\} = \\\\{01, 02, 04, ..., 80\\\\}$ of $\\\\mathbb{F}(2^8)$.'}</Latex></p>\n\n            <Latex displayMode={true}>{`$$\n                \\\\begin{bmatrix} r_0\\\\\\\\r_1\\\\\\\\r_2\\\\\\\\r_3\\\\\\\\r_4\\\\\\\\r_5\\\\\\\\r_6\\\\\\\\r_7 \\\\end{bmatrix}\n                =\n                \\\\begin{bmatrix} 1&0&0&0&1&1&1&1\\\\\\\\1&1&0&0&0&1&1&1\\\\\\\\1&1&1&0&0&0&1&1&\\\\\\\\1&1&1&1&0&0&0&1\\\\\\\\1&1&1&1&1&0&0&0\\\\\\\\0&1&1&1&1&1&0&0\\\\\\\\0&0&1&1&1&1&1&0\\\\\\\\0&0&0&1&1&1&1&1 \\\\end{bmatrix}\n                \\\\begin{bmatrix} q_0\\\\\\\\q_1\\\\\\\\q_2\\\\\\\\q_3\\\\\\\\q_4\\\\\\\\q_5\\\\\\\\q_6\\\\\\\\q_7 \\\\end{bmatrix}\n                +\n                \\\\begin{bmatrix} 1\\\\\\\\1\\\\\\\\0\\\\\\\\0\\\\\\\\0\\\\\\\\1\\\\\\\\1\\\\\\\\0 \\\\end{bmatrix}\n            $$`}</Latex>\n\n            <p>The widget below implements this transformation.</p>\n            <ATWidget default={'00'} />\n            \n            <p>In practice, unless we have severe constraints on the amount of data we can store (think embedded systems), we simply store a table of the result of applying both operations consecutively, and look up the value to substitute, for efficiency reasons.</p>\n            <p>It's also worth bearing in mind that this substition doesn't necessarily need to be exactly the one given here. The authors of Rijndael chose this one because it gives resistance against both differential and linear cryptanalysis techniques, but other suitable substitutions may be used - this is good reason to believe the NSA didn't build in a back door in the specification!</p>\n            <p>Try the whole SubBytes step below - click anywhere on the state box to edit the initial values.</p>\n\n\n            <div className='boxContainerOuter'>\n                <div className='boxContainerInner' onClick={() => setEditOpen(true)}>State:\n                    <Box key={'in'+input.toString()} data={input} /></div>\n                <div className='boxContainerInner'>Output:\n                    <Box key={'out'+input.toString()}\n                    data={input.map( inByte => subs[inByte])} />\n                </div>\n            </div>\n\n            {editOpen && \n            <div><div className='fadeBackground'\n            onClick={() => setEditOpen(false)}></div>\n            <div className='editBoxContainer'>\n                <EditBox initial={input} editHandler={(v) => {\n                    setInput(v);\n                }}/>\n            </div></div>\n            }\n        </div>\n    );\n}\n\nexport default SubBytesPage;","import React, { useState } from 'react'\nimport Box from './Box.js'\nimport EditBox from './EditBox.js'\n\n\nconst init_data = [0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15];\n\n\nfunction ShiftRowsPage(props) {\n    const Latex = props.tex;\n    const [editOpen, setEditOpen] = useState(false);\n    const [input, setInput] = useState(init_data);\n\n    const getOutput = (a) => {\n        const output = Array(a.length);\n        for (let i=0; i<4; i++) {\n            for (let j=0; j<4; j++) {\n                output[4*i + j] = a[4*i + ((j+i) % 4)];\n            }\n        }\n        return output;\n    };\n    \n\n    return (\n        <div className='page'>\n            <h2>Shift Rows</h2>\n            <p>Once we have swapped out elements in the state for others, we want to take each row of the box, and \"rotate\" it. For Rijndael, we move each element in the <Latex>{'$i^{th}$ row $i$'}</Latex> elements to the left, with the ones going past the edge wrapping back around (the top row is row 0!). Note that when we fill our initial state, we are filling column by column, and so this is quite a significant scrambling of the data!</p>\n            <p>Try it out below. Again, the state box can be edited by clicking on it.</p>\n\n\n            <div className='boxContainerOuter'>\n                <div className='boxContainerInner' onClick={() => setEditOpen(true)}>State:\n                    <Box key={'in'+input.toString()} data={input} /></div>\n                <div className='boxContainerInner'>Output:\n                    <Box key={'out'+input.toString()}\n                    data={getOutput(input)} />\n                </div>\n            </div>\n            {editOpen && \n            <div><div className='fadeBackground'\n            onClick={() => setEditOpen(false)}></div>\n            <div className='editBoxContainer'>\n                <EditBox initial={input} editHandler={(v) => {\n                    setInput(v);\n                }}/>\n            </div></div>\n            }\n\n        </div>\n    )\n}\n\n\nexport default ShiftRowsPage;","import React, { useState } from 'react'\nimport Box from './Box.js'\nimport EditBox from './EditBox.js'\nimport util from './Utility.js'\n\n\nfunction getF8MultTable(n) {\n    const irredCoeffs = [1, 1, 0, 1, 1, 0, 0, 0];\n    const transpose = [];\n    let poly = util.toBinArray(n);\n    transpose[0] = poly.slice(0);\n    for(let i=1; i<8; i++) {\n        poly.unshift(0);\n        if(poly.pop() === 1) {\n            poly = poly.map((k, index) => (k + irredCoeffs[index]) % 2);\n        }\n        transpose[i] = poly.slice(0);\n    }\n\n    const table = new Array(8);\n    for(let i=0; i<8; i++) {\n        table[i] = new Array(8);\n        for(let j=0; j<8; j++) {\n            table[i][j] = transpose[j][i];\n        }\n    }\n\n    return { \n        texString: table.map(k => k.join(' & ')).join('\\\\\\\\\\n'),\n        times: (m) => {\n            let arr = util.toBinArray(m);\n            let out = [0,0,0,0,0,0,0,0];\n            for(let i=0; i<8; i++) {\n                if(arr[i])\n                    out = util.xorVec(out, transpose[i]);\n            }\n            return util.toInt(out);\n        }\n    };\n}\n\n\nfunction MultTableDraw(props) {\n    const Latex = props.tex;\n    return (\n        <Latex className='multTable' displayMode={true}>{'$$\\\\begin{bmatrix}' + getF8MultTable(props.n).texString + '\\\\end{bmatrix} $$'}</Latex>\n    );\n}\nfunction MultTableWidget(props) {\n    const [val, setVal] = useState({text: '', valid: false});\n    return (\n        <div class='multTableWidget'>\n            <label for='multTableInput'>Try it - matrix for: </label>\n            <input \n                type='text' \n                value={val.text}\n                onChange={event => {\n                    if(event.target.value==='') {\n                        setVal({text: '', valid: false});\n                    } else {\n                        let i = parseInt(event.target.value, 16);\n                        if(i>=0 && i < 256){\n                            setVal({text: event.target.value, valid: true});\n                        }\n                    }\n                }}\n                placeholder={props.default}\n                id='inverseInput' \n                style={{width: 20}} />\n            {val.valid && \n                <MultTableDraw key={val.text} n={parseInt(val.text, 16)} tex={props.tex} />\n            }\n        </div>\n    );\n}\n\nfunction MixColumnsPage(props) {\n    const [editOpen, setEditOpen] = useState(false);\n    const [input, setInput] = useState(props.input);\n    const Latex = props.tex;\n\n\n    //We assume we have the polynomial with greatest power of x first\n    const poly = [3, 1, 1, 2];\n    const rpoly = poly.slice(0).reverse();\n    const table = [[],[],[],[]];\n    for(let i=0; i<4; i++) {\n        for(let j=0; j<4; j++) {\n            table[j][i] = rpoly[(3*i+j) % 4];\n        }\n    }\n    const transp = new Array(4);\n    for(let i=0; i<4; i++) {\n        transp[i] = new Array(4);\n        for(let j=0; j<4; j++) {\n            transp[i][j] = table[j][i];\n        }\n    }\n    const s = table.map(k => '\\\\{' + k.join('\\\\} & \\\\{') + '\\\\}').join('\\\\\\\\\\n');\n    const multTables = poly.reduce((acc, curr) => {\n        if(acc && !(acc.hasOwnProperty(curr))) {\n            acc[curr] = getF8MultTable(curr);\n        }\n        return acc;\n    }, {});\n\n\n    const getOutput = (a) => {\n        //For each col we want to calculate (=col in output = col in right matrix)    \n        const output = new Array(a.length);\n        for(let k=0; k<4; k++) {\n            let column = [0, 0, 0, 0];\n            //For each col in the left matrix\n            for(let j=0; j<4; j++) {\n                column = util.addVec(\n                    column, \n                    transp[j].map(n => \n                        multTables[n].times(a[4*j + k])\n                    ),\n                    (a, b) => a^b\n                );\n            }\n            for(let l=0; l<4; l++)\n                output[4*l + k] = column[l];\n        }\n        return output;\n    };\n\n\n    return (\n        <div className='page'>\n            <h2>Mix Columns</h2>\n            <p>Here's where things start to get tricky. We now work in <Latex>{'$\\\\mathbb{F}(2^8)[y]$'}</Latex>, that is, the ring of polynomials with coefficients in <Latex>{'$\\\\mathbb{F}(2^8)$'}</Latex>. We still really want to be thinking in terms of our isomorphism earlier, so the hex notation introduced will now be very helpful for keeping our two variables <Latex>{'$x$ and $y$'}</Latex> apart in our heads.</p>\n            <p>We want to think of each column, in turn, as a polynomial of degree strictly less than 4. To this end, we fix a column, and let its elements be the coefficients in ascending order (i.e., the last value is the coefficient of <Latex>$y^3$</Latex>).</p>\n            <p>Now, just the notion that we are working with polynomials of a maximum degree should indicate we are again thinking about a quotient ring. Here, we are doing all following calculations in: <Latex displayMode={true}>{'$$ R := \\\\frac{\\\\mathbb{F}(2^8)[y]}{ ( {\\\\color{green}\\\\{01\\\\}}y^4 + {\\\\color{green}\\\\{01\\\\}} ) }. $$'}</Latex>\n            For this step of the algorithm, we want to multiply each column by a fixed element of <Latex>$R$</Latex>. In Rijndael, this element is \n            <Latex displayMode={true}>{\n                '$$a(y) = ' + poly.map( (n, d) => \n                    '{\\\\color{green}\\\\{' + n.toString(16) + '\\\\}}\\\\cdot y^{' + (3 - d).toString() + '}'\n                ).join(' + ') + '.$$'\n            }</Latex></p>\n\n            <p>Of course, this involves multiplying elements in <Latex>{'$\\\\mathbb{F}(2^8)$'}</Latex>, which is certainly not trivial, so we need to get hold of the multiplication tables for each coefficient. (Why for the coefficients? There are only four of them, and once calculated once, they can be reused). It is fairly easy to find the representation of an element of <Latex>{'$\\\\mathbb{F}(2^8)$'}</Latex> as a matrix acting on the vector space <Latex>{'$\\\\mathbb{F}(2^8)^8$, by considering its action on the standard basis $\\\\{1, x, ..., x^7\\\\}$'}</Latex>. (Talk about the module). You can enter such an element into the box below to see this representation of it.</p>\n\n\n            <MultTableWidget default='00' tex={props.tex} />\n\n            <p>Notice that the coefficients of <Latex>$a$</Latex> make for some very easy calculations! Not only is the identity repeated, <Latex>{'$ {\\\\color{green}\\\\{03\\\\}}$'}</Latex> is just the sum of the other two.</p>\n            \n            <p>Now the particular choice of quotient ring <Latex>$R$</Latex> is very nice - since we saw before that all elements in <Latex>{'$\\\\mathbb{F}(2^8)$'}</Latex> are additively self-inverse, taking this quotient is the same as setting <Latex>{'$ {\\\\color{green}\\\\{01\\\\}}={\\\\color{green}\\\\{01\\\\}}y^4$'}</Latex>, and so the action on each basis element of <Latex>$R$</Latex> is very easy to work out: the vector expression representing the action of <Latex>$a$</Latex> with respect to the basis <Latex>{'$\\\\{{\\\\color{green}\\\\{01\\\\}} , ..., {\\\\color{green}\\\\{01\\\\}}y^3\\\\}$'}</Latex> is:\n                <Latex displayMode={true}>{`$$\n                    \\\\begin{bmatrix} b_0\\\\\\\\b_1\\\\\\\\b_2\\\\\\\\b_3 \\\\end{bmatrix}\n                    =\n                    \\\\begin{bmatrix} ` + s + ` \\\\end{bmatrix}\n                    \\\\begin{bmatrix} a_0\\\\\\\\a_1\\\\\\\\a_2\\\\\\\\a_3 \\\\end{bmatrix},\n                $$`}</Latex>\n            </p>\n\n            <p>Have a play with the boxes below, which will apply the full column mixing transformation.</p>\n\n            <div className='boxContainerOuter'>\n                <div className='boxContainerInner' onClick={() => setEditOpen(true)}>State:\n                    <Box key={'in'+input.toString()} data={input} /></div>\n                <div className='boxContainerInner'>Output:\n                    <Box key={'out'+input.toString()}\n                    data={getOutput(input)} />\n                </div>\n            </div>\n            {editOpen && \n            <div><div className='fadeBackground'\n            onClick={() => setEditOpen(false)}></div>\n            <div className='editBoxContainer'>\n                <EditBox initial={input} editHandler={(v) => {\n                    setInput(v);\n                }}/>\n            </div></div>\n            }\n        </div>\n    );\n}\n\nexport default MixColumnsPage;","import React, { useState } from 'react'\nimport Box from './Box.js'\nimport EditBox from './EditBox.js'\n\nfunction AddRoundKeyPage(props) {\n    const [editInputOpen, setEditInputOpen] = useState(false);\n    const [editKeyOpen, setEditKeyOpen] = useState(false);\n    const [input, setInput] = useState(props.input.data);\n    const [roundKey, setRoundKey] = useState(props.input.roundKey);\n\n    const getOutput = (a, b) => {\n        const output = new Array(a.length);\n        for(let i=0; i<a.length; i++)\n            output[i] = a[i]^b[i];\n        return output;\n    };    \n    \n\n    return (\n        <div className='page'>\n            <h2>Add Round Key</h2>\n            <p>One very easy final step - we simply need to xor the state with the round key we generated. Both the input and round key boxes are editable here!</p>\n\n            <div className='boxContainerOuter'>\n                <div className='boxContainerInner' onClick={() => setEditInputOpen(true)}>State:\n                    <Box key={'in'+input.toString()+roundKey.toString()} data={input} /></div>\n                <div className='boxContainerInner' onClick={() => setEditKeyOpen(true)}>Round Key:\n                    <Box key={'in'+input.toString()+roundKey.toString()} data={roundKey} /></div>\n                <div className='boxContainerInner'>Output\n                    <Box key={'out'+input.toString()+roundKey.toString()}\n                    data={getOutput(input, roundKey)} />\n                </div>\n            </div>\n            {editInputOpen && \n            <div><div className='fadeBackground'\n            onClick={() => setEditInputOpen(false)}></div>\n            <div className='editBoxContainer'>\n                <EditBox initial={input} editHandler={(v) => {\n                    setInput(v);\n                }}/>\n            </div></div>\n            }\n            {editKeyOpen && \n                <div><div className='fadeBackground'\n                onClick={() => setEditKeyOpen(false)}></div>\n                <div className='editBoxContainer'>\n                    <EditBox initial={roundKey} editHandler={(v) => {\n                        setRoundKey(v);\n                    }}/>\n                </div></div>\n            }\n        </div>\n    );\n}\n\nexport default AddRoundKeyPage;","import React, { useState } from 'react';\nimport './App.css';\nimport AboutPage from './About.js';\nimport FirstPage from './First.js';\nimport SubBytesPage from './SubBytes.js';\nimport ShiftRowsPage from './ShiftRows.js';\nimport MixColumnsPage from './MixColumns.js';\nimport AddRoundKeyPage from './AddRoundKey.js';\n\n\nfunction App() {\n  document.title = 'Interactive AES - asg58'\n  const KatexCssInclude = document.createElement('link');\n  KatexCssInclude.href=\"//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.11.1/katex.min.css\";\n  KatexCssInclude.rel=\"stylesheet\";\n  document.head.appendChild(KatexCssInclude);\n  const Latex = require('react-latex');\n\n  //We are building the state matrix the wrong way round\n  //Just fill it out and transpose for the sake of sanity..\n  const test_data = [0x8e, 0x9f, 0xf1, 0xc6, 0x4d, 0xdc, 0x01, 0xc6, 0xa1, 0x58, 0x01, 0xc6, 0xbc, 0x9d, 0x01, 0xc6];\n  const test_key = [0xdb, 0xf2, 0x01, 0xc6, 0x13, 0x0a, 0x01, 0xc6, 0x53, 0x22, 0x01, 0xc6, 0x45, 0x5c, 0x01, 0xc6];\n\n  const [page, setPage] = useState('about');\n  const pageObjects = { \n    'about': <AboutPage className={'page'} tex={Latex} />,\n    'first': <FirstPage className={'page'} input={test_data} tex={Latex} />,\n    'subBytes': <SubBytesPage className={'page'} input={test_data} tex={Latex} />,\n    'shiftRows': <ShiftRowsPage className={'page'} input={test_data} tex={Latex} />,\n    'mixCols': <MixColumnsPage className={'page'} input={test_data} tex={Latex} />,\n    'addRoundKey': <AddRoundKeyPage className={'page'} input={{data: test_data, roundKey: test_key}} tex={Latex} />\n  };\n\n  return (\n    <div id='sub'>\n      <div class='topNav'>\n        <div class='navElt' onClick={() => setPage('about')}>About</div>\n        <div class='navElt' onClick={() => setPage('first')}>Prerequisites</div>\n        <div class='navElt' onClick={() => setPage('subBytes')}>SubBytes</div>\n        <div class='navElt' onClick={() => setPage('shiftRows')}>ShiftRows</div>\n        <div class='navElt' onClick={() => setPage('mixCols')}>MixCols</div>\n        <div class='navElt' onClick={() => setPage('addRoundKey')}>AddRoundKey</div>\n      </div>\n\n      {<div id='main'>{pageObjects[page]}</div>}\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}